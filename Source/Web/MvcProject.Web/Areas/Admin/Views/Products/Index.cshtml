@using MvcProject.Web.Infrastructure.HtmlHelpers
@using MvcProject.Web.Areas.Admin.ViewModels.Products

@model ProductViewModelForeignKeys

@{
    ViewBag.Title = "Products (ADMIN)";
    //var hasDescription = 
}

@(Html.FullFeaturedGrid<ProductViewModel>(
    gridName: "productsGrid",
    controllerName: "Products",
    routeValues: new { Area = "Admin" },
    model: m =>
    {
        m.Id(p => p.Id);
        m.Field(p => p.Id).Editable(false);
        m.Field(p => p.CategoryId).Editable(false).DefaultValue(0);
    },
    pageSize: 20,
    virtualScroll: false,
    columns: c =>
    {
        c.Command(cm => cm.Edit().UpdateText("Save")).Width("100px");
        c.Command(cm => cm.Destroy().Text("Delete")).Width("120px");
        c.Bound(m => m.Id).Width("150px");
        c.Bound(m => m.Title).Width("15%");
        c.Bound(m => m.ShortDescription).Width("20%");
        c.Bound(m => m.UnitPrice);
        c.ForeignKey(m => m.CategoryId, Model.Categories, "Id", "Name").Title("Category");
        c.Bound(m => m.IsInStock);
        c.Bound(m => m.QuantityInStock);
        c.Bound(m => m.Height);
        c.Bound(m => m.Length);
        c.Bound(m => m.Width);
        c.Bound(m => m.Weight);
        c.Bound(m => m.CreatedOn);
        c.Bound(m => m.ModifiedOn);
        c.Bound(m => m.IsDeleted).Title("Marked As Deleted");
        c.Bound(m => m.DeletedOn);
    },
    dataSourceEvents: ev => { ev.Error("errorHandler.handler"); },
    isBatch: false,
    isServerOperation: true,
    editingSettings: editor =>
    {
        editor
            .Mode(GridEditMode.PopUp)
            .Window(window =>
            {
                window
                    .Actions(a => { a.Minimize().Maximize().Close(); })
                    .Draggable(true)
                    .Scrollable(false)
                    .Resizable();
            })
            .TemplateName("ProductViewModelPopupEditor")
            //.AdditionalViewData(new { hasDescription = "" })
            .CreateAt(GridInsertRowPosition.Top)
            //.ConfirmDelete("Delete?")
            .DisplayDeleteConfirmation(false)
            ;
    },
    htmlAttributes: new { @class = "admin-grid" },
    //readHandler: "dataHandler",
    createHandler: "dataHandler",
    updateHandler: "dataHandler",
    destroyHandler: "dataHandler"
    )
    .Selectable()
    .AllowCopy(true)
    .ClientDetailTemplateId("products-detail-template")
    .Deferred())

@section styles{
    <style>
        /*horizontal Grid scrollbar should appear if the browser window is shrinked too much*/
        #productsGrid table {
            width: 4000px;
        }

        #description-details {
            margin-left: 0;
            margin-right: 0;
            width: 100%;
        }
    </style>

    <link href="@Url.Content("~/Content/Custom/Admin/custom-popup-editor.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/Custom/Admin/main-grid.css")" rel="stylesheet" type="text/css" />
}

@section Scripts{
    @(Html.Kendo().DeferredScripts())

    <script src="@Url.Content("~/Scripts/Custom/error-handler.js")"></script>
    <script src="@Url.Content("~/Scripts/Custom/datetime-handlers.js")"></script>

    <script id="products-detail-template" type="text/kendo-tmpl">
        @(Html.Partial("_ProductDetailsTabStrip"))
    </script>

    <script>
        kendo.culture('@BundleConfig.UiCulture');

        function dataHandler(data) {
            datetimeHandlers.normalizeDateProperties(data);
        }

        function onAdditionalData() {
            console.log(Object
                .keys($("#propertiesMultiSelect")
                .data("kendoMultiSelect")
                ));
            return {
                descriptionId: data["Description.Id"]
            };
        }

        //$(document).ready(function () {
        //    var gridData = $('#productsGrid').data("kendoGrid");
        //    console.log(gridData);
        //});

        //function loadProperties() {
        //    $("#propertiesMultiSelect").kendoMultiSelect();

        //    var multiselect = $("#propertiesMultiSelect").data("kendoMultiSelect");

        //    // get data items for the selected options.
        //    //var dataItem = multiselect.dataItems();

        //    //console.log(dataItem);
        //    //console.log(multiselect.initialValues);
        //    console.log(multiselect._initialValues);
        //}
    </script>
}
