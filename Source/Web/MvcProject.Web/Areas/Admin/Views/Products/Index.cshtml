@using MvcProject.Web.Infrastructure.HtmlHelpers
@using MvcProject.Web.Areas.Admin.ViewModels.Descriptions
@using MvcProject.Web.Areas.Admin.ViewModels.Products
@using System.Globalization

@model ProductViewModelForeignKeys

@{
    ViewBag.Title = "Products (ADMIN)";
    var userCulture = this.Request.UserLanguages.FirstOrDefault() ?? "en-US";
}

@(Html.FullFeaturedGrid<ProductViewModel>(
    gridName: "productsGrid",
    controllerName: "Products",
    routeValues: new { Area = "Admin" },
    model: m =>
    {
        m.Id(p => p.Id);
        m.Field(p => p.Id).Editable(false);
        m.Field(p => p.DescriptionId).DefaultValue(0);
    },
    pageSize: 20,
    virtualScroll: false,
    columns: c =>
    {
        c.Command(cm => cm.Edit().UpdateText("Save")).Width("100px");
        c.Command(cm => cm.Destroy().Text("Delete")).Width("120px");
        c.Bound(m => m.Id).Width("150px");
        c.Bound(m => m.Title).Width("15%");
        c.Bound(m => m.ShortDescription).Width("20%");
        c.Bound(m => m.UnitPrice);
        c.ForeignKey(m => m.CategoryId, Model.Categories, "Id", "Name").Title("Category");
        c.ForeignKey(m => m.DescriptionId, Model.Descriptions, "Id", "Id").Title("Description Id").Visible(false);
        c.Bound(m => m.IsInStock);
        c.Bound(m => m.QuantityInStock);
        c.Bound(m => m.Height);
        c.Bound(m => m.Length);
        c.Bound(m => m.Width);
        c.Bound(m => m.Weight);
        c.Bound(m => m.CreatedOn);
        c.Bound(m => m.ModifiedOn);
        c.Bound(m => m.IsDeleted).Title("Marked As Deleted");
        c.Bound(m => m.DeletedOn);
    },
    dataSourceEvents: ev =>
    {
        ev.Error("errorHandler.handler");
    },
    isBatch: false,
    isServerOperation: true,
    editingSettings: editor =>
    {
        editor
            .Mode(GridEditMode.PopUp)
            .Window(window =>
            {
                window
                    .Actions(a => { a.Minimize().Maximize().Close(); })
                    .Draggable(true)
                    .Scrollable(false)
                    .Resizable()
                    ;
            })
            .TemplateName("ProductViewModelPopupEditor")
            //.AdditionalViewData(new { categories = Model.Categories })
            //.CreateAt(GridInsertRowPosition.Bottom)
            //.ConfirmDelete("Delete?")
            //.DisplayDeleteConfirmation(false)
            ;
    },
    htmlAttributes: new { @class = "main-grid" },
    readHandler: "readHandler",
    createHandler: "createHandler",
    updateHandler: "updateHandler",
    destroyHandler: "destroyHandler"
    )
    .Events(e => e.DetailInit("detailInit"))
    .ClientDetailTemplateId("product-details-template")
    .Selectable()
    .AllowCopy(true)
    .Deferred())

@section styles{
    <style>
        /*horizontal Grid scrollbar should appear if the browser window is shrinked too much*/
        #productsGrid table {
            width: 4000px;
        }

        #description-details {
            margin-left: 0;
            margin-right: 0;
            width: 100%;
        }
    </style>

    <link href="@Url.Content("~/Content/Custom/Admin/main-grid.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/Custom/Admin/details-grid.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/Custom/Admin/custom-popup-editor.css")" rel="stylesheet" type="text/css" />
}

@section Scripts{
    @(Html.Kendo().DeferredScripts())

    <script src="@Url.Content("~/Scripts/Custom/error-handler.js")"></script>
    <script src="@Url.Content("~/Scripts/Custom/datetime-handlers.js")"></script>
    <script src="@Url.Content("~/Scripts/Custom/grid-details-helpers.js")"></script>

    <script id="product-details-template" type="text/kendo-tmpl">
        @(Html.Partial("_ProductDetailsTabStrip"))
    </script>

    <script>
        kendo.culture('@userCulture');

        function readHandler(data) {
            datetimeHandlers.normalizeDateProperties(data);
        }

        function createHandler(data) {
            datetimeHandlers.normalizeDateProperties(data);
        }

        function updateHandler(data) {
            datetimeHandlers.normalizeDateProperties(data);
        }

        function destroyHandler(data) {
            datetimeHandlers.normalizeDateProperties(data);
        }

        function detailInit(e) {
            gridDetailsHelpers.setProductDescription(e.data.Id, e.data.Description, 8);
            gridDetailsHelpers.setDataSource("#images-grid_" + e.data.Id, e.data.Images, 10);
            gridDetailsHelpers.setDataSource("#comments-grid_" + e.data.Id, e.data.Comments, 10);
            gridDetailsHelpers.setDataSource("#votes-grid_" + e.data.Id, e.data.Votes, 10);
            gridDetailsHelpers.setDataSource("#tags-grid_" + e.data.Id, e.data.Tags, 10);
        }

        //// jquery.validate to ignore the empty string in dropdownlist value
        //$.validator.defaults.ignore = "";

        //function showData(data) {
        //    console.log($("#CategoryId").data("kendoDropDownList").dataItem());
        //    console.log($("#CategoryId").data("kendoDropDownList").value());
        //}

        //function onAdditionalData() {
        //    console.log(Object
        //        .keys($("#propertiesMultiSelect")
        //        .data("kendoMultiSelect")
        //        ));
        //    return {
        //        descriptionId: data["Description.Id"]
        //    };
        //}

        //$(document).ready(function () {
        //    var gridData = $('#productsGrid').data("kendoGrid");
        //    console.log(gridData);
        //});

        //function loadProperties() {
        //    $("#propertiesMultiSelect").kendoMultiSelect();

        //    var multiselect = $("#propertiesMultiSelect").data("kendoMultiSelect");

        //    // get data items for the selected options.
        //    //var dataItem = multiselect.dataItems();

        //    //console.log(dataItem);
        //    //console.log(multiselect.initialValues);
        //    console.log(multiselect._initialValues);
        //}
    </script>
}
