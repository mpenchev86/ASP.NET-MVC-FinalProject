@using MvcProject.Web.Areas.Administration.ViewModels.SearchFilters
@using MvcProject.Web.Infrastructure.HtmlHelpers

@model SearchFilterViewModelForeignKeys

@{
    ViewBag.Title = "(" + Areas.AdministrationAreaName + ") - SearchFilters";
    var userCulture = this.Request.UserLanguages.FirstOrDefault() ?? "en-US";
}

@Html.AntiForgeryToken()

@(Html.FullFeaturedGrid<SearchFilterViewModel>(
    gridName: "searchFiltersGrid",
    controllerName: "SearchFilters",
    routeValues: new { Area = Areas.AdministrationAreaName },
    model: m =>
    {
        m.Id(p => p.Id);
        m.Field(p => p.Id).Editable(false);
    },
    pageSize: 20,
    virtualScroll: false,
    columns: c =>
    {
        c.Command(cm => cm.Edit().UpdateText("Save")).Width(100);
        c.Command(cm => cm.Destroy().Text("Delete")).Width(120);
        c.Bound(m => m.Id).Width(150);
        c.Bound(m => m.Name);
        c.Bound(m => m.DisplayName);
        c.ForeignKey(m => m.CategoryId, Model.Categories, "Id", "Name").Title("Category");
        c.Bound(m => m.OptionsType);
        c.Bound(m => m.SelectionType);
        c.Bound(m => m.Options);
        c.Bound(m => m.MeasureUnit);
        c.Bound(m => m.CreatedOn);
        c.Bound(m => m.ModifiedOn);
        c.Bound(m => m.IsDeleted).Width("120px").Title("Marked As Deleted");
        c.Bound(m => m.DeletedOn);
    },
    dataSourceEvents: ev => { ev.Error("errorHandler.handler"); },
    isBatch: false,
    isServerOperation: true,
    editingSettings: editor =>
    {
        editor
            .Mode(GridEditMode.PopUp)
            .Window(window =>
            {
                window
                    .Actions(a => { a.Minimize().Maximize().Close(); })
                    .Draggable(true)
                    .Scrollable(false)
                    .Resizable();
            })
            .TemplateName("SearchFilterViewModelPopupEditor")
            ;
    },
    htmlAttributes: new { @class = "main-grid" },
    readHandler: "readHandler",
    createHandler: "createHandler",
    updateHandler: "updateHandler",
    destroyHandler: "destroyHandler"
    )
    //.Events(e => e.DetailInit("detailInit"))
    //.ClientDetailTemplateId("search-filter-details-template")
    .Selectable()
    .AllowCopy(true)
    .Deferred()
)

@section Styles{
    <style>
        /*horizontal Grid scrollbar should appear if the browser window is shrinked too much*/
        #searchFiltersGrid table {
            width: 1500px;
        }
    </style>

    <link href="@Url.Content(StaticResourcesUrls.MainGrid)" rel="stylesheet" type="text/css" />
    <link href="@Url.Content(StaticResourcesUrls.DetailsGrid)" rel="stylesheet" type="text/css" />
    <link href="@Url.Content(StaticResourcesUrls.CustomPopupEditor)" rel="stylesheet" type="text/css" />
}

@section Scripts{
    @(Html.Kendo().DeferredScripts())

    <script src="@Url.Content(StaticResourcesUrls.ErrorHandler)"></script>
    <script src="@Url.Content(StaticResourcesUrls.DatetimeHandlers)"></script>
    <script src="@Url.Content(StaticResourcesUrls.GridDetailsHelpers)"></script>

    @*<script id="search-filter-details-template" type="text/kendo-tmpl">
        @(Html.Partial("_SearchFilterDetailsTabStrip"))
    </script>*@

    <script>
        kendo.culture('@userCulture');

        // Initialize the Kendo UI Validator on the form
        $(function () {
            $("form").kendoValidator();
        });

        // These functions send additional information to the server with every CRUD operation of the grid.
        // Currently, they parse all DateTime properties of the model in a format the server can understand and send
        // an anti-forgery token to validate the editor form.
        function readHandler(data) {
            datetimeHandlers.normalizeDateProperties(data);
            return { "__RequestVerificationToken": $('input[name=__RequestVerificationToken]').val() }
        }

        function createHandler(data) {
            datetimeHandlers.normalizeDateProperties(data);
            return { "__RequestVerificationToken": $('input[name=__RequestVerificationToken]').val() }
        }

        function updateHandler(data) {
            datetimeHandlers.normalizeDateProperties(data);
            return { "__RequestVerificationToken": $('input[name=__RequestVerificationToken]').val() }
        }

        function destroyHandler(data) {
            datetimeHandlers.normalizeDateProperties(data);
            return { "__RequestVerificationToken": $('input[name=__RequestVerificationToken]').val() }
        }

        //// Populate Kendo Detail TabStrip
        //function detailInit(e) {
        //    gridDetailsHelpers.setDataSource("#search-filters-grid_" + e.data.Id, e.data.Products, 10);
        //}
    </script>
}
