@using MvcProject.Web.Infrastructure.HtmlHelpers
@using MvcProject.Web.Areas.Administration.ViewModels.Products
@using System.Globalization
@using System.Web.Mvc

@model ProductViewModelForeignKeys

@{
    ViewBag.Title = "(" + Areas.AdministrationAreaName + ") - Products";
    var userCulture = this.Request.UserLanguages.FirstOrDefault() ?? "en-US";
}

@Html.AntiForgeryToken()

@(Html.FullFeaturedGrid<ProductViewModel>(
    gridName: "productsGrid",
    createAction: "CreateProduct",
    updateAction: "UpdateProduct",
    controllerName: "Products",
    routeValues: new { Area = Areas.AdministrationAreaName },
    model: m =>
    {
        m.Id(p => p.Id);
        m.Field(p => p.Id).Editable(false);
        m.Field(p => p.AllTimeAverageRating).Editable(false);
        m.Field(p => p.DescriptionId).Editable(true).DefaultValue(null);
        m.Field(p => p.SellerId).Editable(true).DefaultValue(null);
        m.Field(p => p.MainImageId).Editable(true).DefaultValue(null);
        m.Field(p => p.ShippingPrice).Editable(true).DefaultValue(null);
    },
    pageSize: 20,
    virtualScroll: false,
    columns: c =>
    {
        c.Command(cm => cm.Edit().UpdateText("Save")).Width(100);
        c.Command(cm => cm.Destroy().Text("Delete")).Width(120);
        c.Bound(m => m.Id).Width(150);
        c.Bound(m => m.Title).Width("15%");
        c.Bound(m => m.ShortDescription).Width("20%");
        c.ForeignKey(m => m.CategoryId, Model.Categories, "Id", "Name").Title("Category");
        c.ForeignKey(m => m.DescriptionId, Model.Descriptions, "Id", "Id").Title("Description Id").Visible(false);
        //c.ForeignKey(m => m.MainImageId, Model.Images, "Id", "Id").Title("Main Image Id").Visible(false);
        c.Bound(m => m.UnitPrice);
        c.Bound(m => m.ShippingPrice);
        c.Bound(m => m.IsInStock);
        c.Bound(m => m.QuantityInStock);
        c.Bound(m => m.AllTimeItemsSold);
        c.Bound(m => m.AllTimeAverageRating);
        c.ForeignKey(m => m.SellerId, Model.Sellers, "Id", "Name").Title("Seller Name").Visible(false);
        c.Bound(m => m.SellerId);
        c.Bound(m => m.CreatedOn);
        c.Bound(m => m.ModifiedOn);
        c.Bound(m => m.IsDeleted).Title("Marked As Deleted");
        c.Bound(m => m.DeletedOn);
    },
    dataSourceEvents: ev => { ev.Error("errorHandler.handler"); },
    isBatch: false,
    isServerOperation: true,
    editingSettings: editor =>
    {
        editor
            .Mode(GridEditMode.PopUp)
            .Window(window =>
            {
                window
                    .Actions(a => { a.Minimize().Maximize().Close(); })
                    .Draggable(true)
                    .Scrollable(false)
                    .Resizable()
                    ;
            })
            .TemplateName("ProductViewModelPopupEditor");
    },
    htmlAttributes: new { @class = "main-grid" },
    readHandler: "readHandler",
    createHandler: "createHandler",
    updateHandler: "updateHandler",
    destroyHandler: "destroyHandler"
    )
    .Events(e => e
        .DetailInit("detailInit")
        .Edit("onEdit")
    )
    .ClientDetailTemplateId("product-details-template")
    .Selectable()
    .AllowCopy(true)
    .Deferred())

@section Styles{
    <style>
        /*horizontal Grid scrollbar should appear if the browser window is shrinked too much*/
        #productsGrid table {
            width: 4000px;
        }

        #description-details {
            margin-left: 0;
            margin-right: 0;
            width: 100%;
        }

        #seller-details {
            margin-left: 0;
            margin-right: 0;
            width: 100%;
        }
    </style>

    <link href="@Url.Content(StaticResourcesUrls.MainGrid)" rel="stylesheet" type="text/css" />
    <link href="@Url.Content(StaticResourcesUrls.DetailsGrid)" rel="stylesheet" type="text/css" />
    <link href="@Url.Content(StaticResourcesUrls.CustomPopupEditor)" rel="stylesheet" type="text/css" />
}

@section Scripts{
    @(Html.Kendo().DeferredScripts())

    <script src="@Url.Content(StaticResourcesUrls.ErrorHandler)"></script>
    <script src="@Url.Content(StaticResourcesUrls.DatetimeHandlers)"></script>
    <script src="@Url.Content(StaticResourcesUrls.GridDetailsHelpers)"></script>

    <script id="product-details-template" type="text/kendo-tmpl">
        @(Html.Partial("_ProductDetailsTabStrip"))
    </script>

    <script>
        // Setting the current culture to use with Kendo UI
        kendo.culture('@userCulture');

        // Initialize the Kendo UI Validator on the create/edit form
        $(function () {
            $("form").kendoValidator();
        });

        // These functions handle sending additional information to the server with every CRUD operation of the grid.
        // Currently, they parse all DateTime properties of the model in a format the server can understand and send
        // an anti-forgery token to validate the editor form.
        function readHandler(data) {
            datetimeHandlers.normalizeDateProperties(data);
            return { "__RequestVerificationToken": $('input[name=__RequestVerificationToken]').val() }
        }

        function createHandler(data) {
            datetimeHandlers.normalizeDateProperties(data);
            return {
                "__RequestVerificationToken": $('input[name=__RequestVerificationToken]').val(),
                productImagesIds: processedFilesIds
            }
        }

        function updateHandler(data) {
            datetimeHandlers.normalizeDateProperties(data);
            return {
                "__RequestVerificationToken": $('input[name=__RequestVerificationToken]').val(),
                productImagesIds: processedFilesIds
            }
        }

        function destroyHandler(data) {
            datetimeHandlers.normalizeDateProperties(data);
            return { "__RequestVerificationToken": $('input[name=__RequestVerificationToken]').val() }
        }

        // Populate Kendo detail TabStrip
        function detailInit(e) {
            gridDetailsHelpers.populateProductDescription(e.data.Id, e.data.Description, 8);
            gridDetailsHelpers.populateProductSeller(e.data.Id, e.data.Seller);
            gridDetailsHelpers.setDataSource("#images-grid_" + e.data.Id, e.data.Images, 10);
            gridDetailsHelpers.setDataSource("#comments-grid_" + e.data.Id, e.data.Comments, 10);
            gridDetailsHelpers.setDataSource("#votes-grid_" + e.data.Id, e.data.Votes, 10);
            gridDetailsHelpers.setDataSource("#tags-grid_" + e.data.Id, e.data.Tags, 10);
        }

        function onEdit(args) {
            $("#productImages").kendoUpload({
                async: {
                    saveUrl: "/Administration/Products/SaveImages",
                    saveField: "productImages",
                    removeUrl: "/Administration/Products/RemoveImages",
                    removeField: "filePaths",
                    autoUpload: false,
                    batch: true
                },
                multiple: true,
                files: loadImagesFromModel(args),
                success: function (e) {
                    onSuccess(e);
                    // Notifies Update action of kendo Grid that data has changed. Since kendo Upload handlers differ from
                    // those of the grid, uploads/removes don't change grid's form data.
                    args.model.dirty = true;
                },
                remove: onRemove,
                error: onError,
            });
        }

        function loadImagesFromModel(args) {
            var files = [];
            var images = args.model.Images
            if (images) {
                var len = images.length;
                for (var i = 0; i < len; i++) {
                    files.push({
                        name: images[i].OriginalFileName,
                        url: images[i].UrlPath,
                        extension: images[i].FileExtension,
                        imageId: images[i].IdEncoded
                    });
                }
            }

            return files;
        }

        // Popup editor events for kendo Upload helper editor for Product Images property
        var processedFilesIds;
        function onSuccess(e) {
            processedFilesIds = e.response.productImagesIds;
        }

        function onRemove(e) {
            // Array with information about the removed files
            var images = e.files;
            //console.log(e.sender);
            //$.each(files, function (key, value) {
            //    //value.name = value.url + '/' + value.name;
            //    value.name = value.imageId;
            //});
            var imageIds = [];
            $.each(images, function getImageIds(key, val) {
                imageIds.push(val.imageId);
            });
            //console.log(fileIds);
            e.data = { imageIds: imageIds };
            console.log(e.sender);
            //console.log(e);

            // Process the Remove event
            // Optionally cancel the remove operation by calling
            // e.preventDefault()
        }

        function onError(e) {
            // Array with information about the uploaded files
            var files = e.files;

            if (e.operation == "upload") {
                alert("Failed to upload " + files.length + " files");
            }
        }
    </script>
}
