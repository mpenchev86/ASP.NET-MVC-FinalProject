@using MvcProject.Web.Infrastructure.HtmlHelpers
@using MvcProject.Web.Areas.Administration.ViewModels.Products
@using System.Globalization
@using System.Web.Mvc

@model ProductViewModelForeignKeys

@{
    ViewBag.Title = "(" + Areas.AdministrationAreaName + ") - Products";
    var userCulture = this.Request.UserLanguages.FirstOrDefault() ?? "en-US";
}

@Html.AntiForgeryToken()

@(Html.FullFeaturedGrid<ProductViewModel>(
    gridName: "productsGrid",
    createAction: "CreateProduct",
    updateAction: "UpdateProduct",
    controllerName: "Products",
    routeValues: new { Area = Areas.AdministrationAreaName },
    model: m =>
    {
        m.Id(p => p.Id);
        m.Field(p => p.Id).Editable(false);
        m.Field(p => p.AllTimeAverageRating).Editable(false);
        m.Field(p => p.DescriptionId).Editable(true).DefaultValue(null);
        m.Field(p => p.SellerId).Editable(true).DefaultValue(null);
        m.Field(p => p.MainImageId).Editable(true).DefaultValue(null);
        m.Field(p => p.ShippingPrice).Editable(true).DefaultValue(null);
    },
    pageSize: 20,
    virtualScroll: false,
    columns: c =>
    {
        c.Command(cm => cm.Edit().UpdateText("Save")).Width(100);
        c.Command(cm => cm.Destroy().Text("Delete")).Width(120);
        c.Bound(m => m.Id).Width(150);
        c.Bound(m => m.Title).Width("15%");
        c.Bound(m => m.ShortDescription).Width("20%");
        c.ForeignKey(m => m.CategoryId, Model.Categories, "Id", "Name").Title("Category");
        c.ForeignKey(m => m.DescriptionId, Model.Descriptions, "Id", "Id").Title("Description Id").Visible(false);
        c.Bound(m => m.MainImageId).Visible(false);
        c.Bound(m => m.UnitPrice);
        c.Bound(m => m.ShippingPrice);
        c.Bound(m => m.IsInStock);
        c.Bound(m => m.QuantityInStock);
        c.Bound(m => m.AllTimeItemsSold);
        c.Bound(m => m.AllTimeAverageRating);
        c.ForeignKey(m => m.SellerId, Model.Sellers, "Id", "Name").Title("Seller Name").Visible(false);
        c.Bound(m => m.SellerId);
        c.Bound(m => m.CreatedOn);
        c.Bound(m => m.ModifiedOn);
        c.Bound(m => m.IsDeleted).Title("Marked As Deleted");
        c.Bound(m => m.DeletedOn);
    },
    dataSourceEvents: ev => { ev.Error("errorHandler.handler").Sync("onDataSourceSync"); },
    isBatch: false,
    isServerOperation: true,
    editingSettings: editor =>
    {
        editor
            .Mode(GridEditMode.PopUp)
            .Window(window =>
            {
                window
                    .Actions(a => { a.Minimize().Maximize().Close(); })
                    .Draggable(true)
                    .Scrollable(false)
                    .Events(e => { e.Deactivate("onPopupDeactivate"); })
                    // allows grid refresh on Close
                    .Iframe(true)
                    .Resizable()
                    ;
            })
            .TemplateName("ProductViewModelPopupEditor");
    },
    htmlAttributes: new { @class = "main-grid" },
    readHandler: "readHandler",
    createHandler: "createHandler",
    updateHandler: "updateHandler",
    destroyHandler: "destroyHandler"
    )
    .Events(e => e
        .DetailInit("detailInit")
        .Edit("onGridEdit")
    )
    .ClientDetailTemplateId("product-details-template")
    .Selectable()
    .AllowCopy(true)
    .Deferred())

@section Styles{
    <style>
        /*horizontal Grid scrollbar should appear if the browser window is shrinked too much*/
        #productsGrid table {
            width: 4000px;
        }

        #description-details {
            margin-left: 0;
            margin-right: 0;
            width: 100%;
        }

        #seller-details {
            margin-left: 0;
            margin-right: 0;
            width: 100%;
        }
    </style>

    <link href="@Url.Content(StaticResourcesUrls.MainGrid)" rel="stylesheet" type="text/css" />
    <link href="@Url.Content(StaticResourcesUrls.DetailsGrid)" rel="stylesheet" type="text/css" />
    <link href="@Url.Content(StaticResourcesUrls.CustomPopupEditor)" rel="stylesheet" type="text/css" />
}

@section Scripts{
    @(Html.Kendo().DeferredScripts())

    <script src="@Url.Content(StaticResourcesUrls.ErrorHandler)"></script>
    <script src="@Url.Content(StaticResourcesUrls.DatetimeHandlers)"></script>
    <script src="@Url.Content(StaticResourcesUrls.GridDetailsHelpers)"></script>

    <script id="product-details-template" type="text/kendo-tmpl">
        @(Html.Partial("_ProductDetailsTabStrip"))
    </script>

    <script id="uploaded-image-template" type="text/kendo-tmpl">
        @(Html.Partial("_UploadedImage"))
    </script>

    <script>
        // Sets the current culture for Kendo UI
        kendo.culture('@userCulture');

        // Initialize Kendo UI Validator on the create/edit form
        $(function () {
            $("form").kendoValidator();
        });

        // These functions send additional information to the server with every CRUD operation of the grid.
        // Currently, they parse all DateTime properties of the model in a format the server can understand and send
        // an anti-forgery token to validate the editor form.
        function readHandler(data) {
            datetimeHandlers.normalizeDateProperties(data);
            return { "__RequestVerificationToken": $('input[name=__RequestVerificationToken]').val() }
        }

        function createHandler(data) {
            datetimeHandlers.normalizeDateProperties(data);
            return {
                "__RequestVerificationToken": $('input[name=__RequestVerificationToken]').val(),
                productImagesIds: processedImagesIds,
            }
        }

        function updateHandler(data) {
            console.log(processedImagesIds);
            datetimeHandlers.normalizeDateProperties(data);
            return {
                "__RequestVerificationToken": $('input[name=__RequestVerificationToken]').val(),
                productImagesIds: processedImagesIds,
            }
        }

        function destroyHandler(data) {
            datetimeHandlers.normalizeDateProperties(data);
            return { "__RequestVerificationToken": $('input[name=__RequestVerificationToken]').val() }
        }

        // Populate Kendo detail TabStrip
        function detailInit(e) {
            gridDetailsHelpers.populateProductDescription(e.data.Id, e.data.Description, 8);
            gridDetailsHelpers.populateProductSeller(e.data.Id, e.data.Seller);
            gridDetailsHelpers.setDataSource("#images-grid_" + e.data.Id, e.data.Images, 10);
            gridDetailsHelpers.setDataSource("#comments-grid_" + e.data.Id, e.data.Comments, 10);
            gridDetailsHelpers.setDataSource("#votes-grid_" + e.data.Id, e.data.Votes, 10);
            gridDetailsHelpers.setDataSource("#tags-grid_" + e.data.Id, e.data.Tags, 10);
        }

        // Disposing of Kendo Upload bindings to Images property
        function onPopupDeactivate(e) {
            $("#productImages").data("kendoUpload").destroy();
            $("#productImages").closest(".k-upload").remove();
        }

        // Automatically 
        function onDataSourceSync(e) {
            this.read();
        }

        function onGridEdit(args) {
            // MainImage dropdown settings
            var allProductImages = args.model.Images;
            var initialFiles = loadImagesFromModel(allProductImages);
            var mainImageDataSource = new kendo.data.DataSource({
                data: allProductImages,
            });
            var mainImageDropdown = $("#MainImageId").data("kendoDropDownList");
            mainImageDropdown.setDataSource(mainImageDataSource);
            mainImageDropdown.value(args.model.MainImageId);
            mainImageDropdown.refresh();

            // Kendo Upload.
            $("#productImages").kendoUpload({
                async: {
                    saveUrl: "/Administration/Products/SaveImages",
                    saveField: "productImages",
                    removeUrl: "/Administration/Products/RemoveImages",
                    autoUpload: false,
                    batch: true
                },
                multiple: true,
                files: initialFiles,
                success: function (e) {
                    onUploadSuccess(e);
                    // Notifies Update action of kendo Grid that data has changed. Since kendo Upload handlers differ from
                    // those of the grid, uploads/removes don't change grid's form data.
                    $.merge(allProductImages, e.response.productImages);
                    //console.log("allProductImages: ");
                    //console.log(allProductImages);
                    mainImageDropdown.setDataSource(mainImageDataSource);

                    prepareInitialFiles(loadImagesFromModel(allProductImages), uploadedImageTemplate);
                    args.model.dirty = true;
                },
                complete: function (e) {
                    //onUploadComplete(e);
                },
                remove: onUploadRemove,
                error: onUploadError,
            });

            var uploadedImageTemplate = kendo.template($('#uploaded-image-template').html());
            prepareInitialFiles(initialFiles, uploadedImageTemplate);
            // Append save tip to the upload widget.
            $('.k-widget.k-upload').append('<div class="save-upload-tip"><span class="glyphicon glyphicon-exclamation-sign"></span><em> After you select files to upload, click the Upload button that will appear next to this text. When the upload is complete, click the Save button to save the entire form. Otherwise, the associations between product and files will be lost.<em><div>');
        }

        // Returns an array of initial files for Kendo Upload
        function loadImagesFromModel(images) {
            var initialFiles = [];
            if (images) {
                var len = images.length;
                for (var i = 0; i < len; i++) {
                    initialFiles.push({
                        name: images[i].OriginalFileName,
                        url: images[i].UrlPath,
                        extension: images[i].FileExtension,
                        imageId: images[i].IdEncoded
                    });
                }
            }

            return initialFiles;
        }

        function prepareInitialFiles(initialFiles, uploadedImageTemplate) {
            $('.k-file>.k-filename').each(function replaceContent() {
                var span = $(this);
                var title = span.attr("title");
                $.each(initialFiles, function findAndReplaceSpanContent(index, val) {
                    if (val.name === title) {
                        span.replaceWith(uploadedImageTemplate({ name: val.name, url: val.url + "_tmbl" + val.extension }));
                    }
                });
            });
        }

        // Popup editor events for kendo Upload helper editor for product's images.
        var processedImagesIds = [];
        function onUploadSuccess(e) {
            //processedImagesIds = e.response.productImagesIds;

            //$.merge(processedImagesIds, e.response.productImagesIds);
            //console.log(processedImagesIds);
            //console.log(e.response.productImagesIds);

            $.each(e.response.productImages, function (index, val) {
                processedImagesIds.push(val.IdEncoded);
            });
            //console.log("processedImagesIds: ");
            //console.log(processedImagesIds);
        }

        function onUploadRemove(e) {
            // Array with information about the files being removed
            var images = e.files;
            var imageIds = [];
            $.each(images, function getImageIds(key, val) {
                imageIds.push(val.imageId);
            });

            // key-value pairs sent to the server as additional information
            e.data = { imageIds: imageIds };
        }

        function onUploadError(e) {
            // Array with information about the files being uploaded
            var files = e.files;
            if (e.operation == "upload") {
                alert("Failed to upload " + files.length + " files");
            }
        }
    </script>
}
